generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  NURSE
  DOCTOR
  LAB_TECHNICIAN
  PATIENT
  CASHIER
}

enum Status {
  ACTIVE
  INACTIVE
  DORMANT
}

enum JOBTYPE {
  FULL
  PART  
}

enum Gender {
  MALE
  FEMALE
  UNKNOWN
  OTHER
}

enum AppointmentStatus {
  PENDING
  SCHEDULED
  CANCELLED
  COMPLETED
}

enum OrderType {
  MEDICATION
  LAB
  IMAGING
  REFERRAL
  PROCEDURE
}

enum OrderStatus {
  DRAFT
  SUBMITTED
  APPROVED
  IN_PROGRESS
  COMPLETED
  CANCELLED
  ON_HOLD
}

enum PaymentMethod {
  CASH
  CARD
}

enum PaymentStatus {
  PAID
  UNPAID
  PARTIAL
}

model Organization {
  id          String   @id
  name        String
  type        String?  // e.g., "Main Clinic", "Satellite Branch"
  parent_id   String?  // Self-referential for hierarchy
  parent      Organization? @relation("OrgHierarchy", fields: [parent_id], references: [id])
  children    Organization[] @relation("OrgHierarchy")
  doctors     Doctor[]       @relation("DoctorOrganization")
  staff       Staff[]        @relation("StaffOrganization")
  appointments Appointment[]  @relation("AppointmentOrganization")
  patients    Patient[]      @relation("PatientOrganization")
  orders      Order[]        @relation("OrderOrganization")
  medicalRecords MedicalRecord[] @relation("MedicalRecordOrganization")
  payments    Payment[]      @relation("PaymentOrganization")
  services    Services[]     @relation("ServicesOrganization")
  auditLogs   AuditLog[]     @relation("AuditLogOrganization")
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Coding {
  id           Int      @id @default(autoincrement())
  system       String
  code         String
  display      String?
  order_id     Int?
  condition_id Int?
  allergy_id   Int?
  diagnosis_id Int?
  order        Order?   @relation(fields: [order_id], references: [id])
  condition    Condition? @relation(fields: [condition_id], references: [id])
  allergy      Allergy?   @relation(fields: [allergy_id], references: [id])
  diagnosis    Diagnosis? @relation(fields: [diagnosis_id], references: [id])
  medicationOrder MedicationOrder[]
  labOrder        LabOrder[]
  labResult       LabResult[]
  imagingOrder    ImagingOrder[]
  vitalSigns      VitalSigns[]
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
}

model Patient {
  id                       String   @id
  identifiers              Identifier[]
  first_name               String
  last_name                String
  date_of_birth            DateTime
  gender                   Gender   @default(UNKNOWN)
  phone                    String
  email                    String   @unique
  marital_status           String?
  address                  String
  emergency_contacts       EmergencyContact[]
  conditions               Condition[]
  allergies                Allergy[]
  insurance                Insurance[]
  privacy_consent          Boolean
  service_consent          Boolean
  medical_consent          Boolean
  img                      String?
  colorCode                String?
  organization_id          String?  // Optional: Primary organization affiliation
  organization             Organization? @relation("PatientOrganization", fields: [organization_id], references: [id])

  appointments             Appointment[]
  medical_records          MedicalRecord[]
  payments                 Payment[]
  ratings                  Rating[]
  orders                   Order[]

  created_at               DateTime @default(now())
  updated_at               DateTime @updatedAt
}

model Identifier {
  id          Int      @id @default(autoincrement())
  patient_id  String
  system      String
  value       String
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model EmergencyContact {
  id          Int      @id @default(autoincrement())
  patient_id  String
  name        String
  phone       String
  relation    String
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Condition {
  id          Int      @id @default(autoincrement())
  patient_id  String
  name        String
  coding      Coding[]
  onset_date  DateTime?
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Allergy {
  id          Int      @id @default(autoincrement())
  patient_id  String
  substance   String
  coding      Coding[]
  reaction    String?
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Insurance {
  id          Int      @id @default(autoincrement())
  patient_id  String
  provider    String
  number      String
  patient     Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
}

model Doctor {
  id                    String   @id
  email                 String   @unique
  name                  String
  specialization        String
  license_number        String
  phone                 String
  address               String
  department            String?
  img                   String?
  colorCode             String?
  availability_status   String?
  organization_id       String?  // Clinic affiliation
  organization          Organization? @relation("DoctorOrganization", fields: [organization_id], references: [id])

  type                  JOBTYPE @default(FULL)
  working_days          WorkingDays[]
  appointments          Appointment[]
  ratings               Rating[]
  orders                Order[]
  diagnosis             Diagnosis[]

  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model WorkingDays {
  id              Int      @id @default(autoincrement())
  doctor_id       String
  day             String
  start_time      String
  close_time      String
  doctor          Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Order {
  id               Int         @id @default(autoincrement())
  patient_id       String
  doctor_id        String
  encounter_id     Int?
  organization_id  String?     // Clinic where order was issued
  order_type       OrderType
  status           OrderStatus @default(DRAFT)
  details          Json?
  priority         String?
  reason_code      Coding[]
  created_by       String
  fulfilled_by     String?
  cancelled_reason String?

  patient          Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor           Doctor      @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  organization     Organization? @relation("OrderOrganization", fields: [organization_id], references: [id])
  encounter        MedicalRecord? @relation(fields: [encounter_id], references: [id], onDelete: SetNull)
  medication       MedicationOrder?
  lab              LabOrder?
  imaging          ImagingOrder?

  created_at       DateTime    @default(now())
  updated_at       DateTime    @updatedAt
}

model MedicationOrder {
  id            Int      @id @default(autoincrement())
  order_id      Int      @unique
  medication    String
  coding        Coding[]
  dosage        String
  frequency     String
  route         String
  duration      String?
  dispense_qty  Int?
  notes         String?

  order         Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model LabOrder {
  id            Int      @id @default(autoincrement())
  order_id      Int      @unique
  test_name     String
  coding        Coding[]
  specimen      String?
  notes         String?
  order         Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  result        LabResult?
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model LabResult {
  id            Int      @id @default(autoincrement())
  lab_order_id  Int      @unique
  result        String
  coding        Coding[]
  status        String
  notes         String?
  lab_order     LabOrder @relation(fields: [lab_order_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model ImagingOrder {
  id            Int      @id @default(autoincrement())
  order_id      Int      @unique
  procedure     String
  coding        Coding[]
  body_site     String?
  notes         String?
  order         Order    @relation(fields: [order_id], references: [id], onDelete: Cascade)
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt
}

model MedicalRecord {
  id              Int      @id @default(autoincrement())
  patient_id      String
  appointment_id  Int
  doctor_id       String
  organization_id String?  // Clinic where record was created
  status          String
  treatment_plan  String?
  notes           String?
  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  patient         Patient     @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  organization    Organization? @relation("MedicalRecordOrganization", fields: [organization_id], references: [id])
  orders          Order[]
  vital_signs     VitalSigns[]
  diagnosis       Diagnosis[]
  created_at      DateTime    @default(now())
  updated_at      DateTime    @updatedAt
}

model Appointment {
  id              Int          @id @default(autoincrement())
  patient_id      String
  doctor_id       String
  organization_id String?      // Clinic where appointment occurs
  appointment_date DateTime
  time            String
  status          AppointmentStatus @default(PENDING)
  type            String
  note            String?
  patient         Patient      @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  doctor          Doctor       @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  organization    Organization? @relation("AppointmentOrganization", fields: [organization_id], references: [id])
  medical         MedicalRecord[]
  bills           Payment[]
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt
}

model VitalSigns {
  id                Int      @id @default(autoincrement())
  medical_id        Int
  medical           MedicalRecord @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  body_temperature  Float?
  systolic          Int?
  diastolic         Int?
  heartRate         String?
  respiratory_rate  Int?
  oxygen_saturation Int?
  weight            Float?
  height            Float?
  coding            Coding[]
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Diagnosis {
  id                Int      @id @default(autoincrement())
  medical_id        Int
  doctor_id         String
  doctor            Doctor   @relation(fields: [doctor_id], references: [id], onDelete: Cascade)
  symptoms          String
  diagnosis         String
  coding            Coding[]
  notes             String?
  prescribed_medications String?
  follow_up_plan    String?
  medical           MedicalRecord @relation(fields: [medical_id], references: [id], onDelete: Cascade)
  created_at        DateTime @default(now())
  updated_at        DateTime @updatedAt
}

model Staff {
  id              String   @id
  email           String   @unique
  name            String
  phone           String
  address         String
  department      String?
  img             String?
  license_number  String?
  colorCode       String?
  role            Role
  status          Status   @default(ACTIVE)
  organization_id String?  // Clinic affiliation
  organization    Organization? @relation("StaffOrganization", fields: [organization_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Payment {
  id              Int   @id @default(autoincrement())
  patient_id      String
  appointment_id  Int   @unique
  organization_id String?  // Clinic where payment was processed
  bill_date       DateTime
  payment_date    DateTime?
  discount        Float   @default(0)
  total_amount    Float
  amount_paid     Float   @default(0)
  payment_method  PaymentMethod @default(CASH)
  status          PaymentStatus @default(UNPAID)
  receipt_number  Int   @unique @default(autoincrement())
  patient         Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  appointment     Appointment @relation(fields: [appointment_id], references: [id], onDelete: Cascade)
  organization    Organization? @relation("PaymentOrganization", fields: [organization_id], references: [id])
  bills           PatientBills[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model PatientBills {
  id              Int   @id @default(autoincrement())
  bill_id         Int
  service_id      Int
  service_date    DateTime
  quantity        Int
  unit_cost       Float
  total_cost      Float
  service         Services @relation(fields: [service_id], references: [id])
  payment         Payment @relation(fields: [bill_id], references: [id], onDelete: Cascade)
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Services {
  id              Int   @id @default(autoincrement())
  service_name    String
  description     String
  price           Float
  organization_id String?  // Clinic-specific services (optional)
  organization    Organization? @relation("ServicesOrganization", fields: [organization_id], references: [id])
  bills           PatientBills[]
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}

model Rating {
  id         Int      @id @default(autoincrement())
  staff_id   String
  patient_id String
  rating     Int
  comment    String?
  doctor     Doctor   @relation(fields: [staff_id], references: [id], onDelete: Cascade)
  patient    Patient  @relation(fields: [patient_id], references: [id], onDelete: Cascade)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
}

model AuditLog {
  id              Int      @id @default(autoincrement())
  user_id         String
  record_id       String
  action          String
  details         String?
  model           String
  organization_id String?  // Track actions per clinic
  organization    Organization? @relation("AuditLogOrganization", fields: [organization_id], references: [id])
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt
}